import logging
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = YOUR_ADMIN_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CSV_FILE = "clients.csv"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

def init_csv():
    try:
        with open(CSV_FILE, "x", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["user_id", "username", "name", "phone", "submitted_at", "status", "reason", "file_id"])
    except FileExistsError:
        pass

def user_exists(user_id):
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return any(str(row["user_id"]) == str(user_id) for row in reader)

def add_user(data):
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(data)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="begin")
    )
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "begin")
async def begin_handler(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")
    )
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "agree")
async def agree_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å.")
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )
    await bot.send_message(callback_query.from_user.id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏")

@dp.message_handler(commands=["–≤—ã–≥—Ä—É–∑–∫–∞"])
async def export_cmd(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.reply_document(open(CSV_FILE, "rb"))
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user = message.from_user
    if user_exists(user.id):
        await message.reply("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤. –°–ø–∞—Å–∏–±–æ!")
        return

    file_id = message.photo[-1].file_id
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    username = f"@{user.username}" if user.username else ""
    name = f"{user.first_name or ''} {user.last_name or ''}".strip()

    add_user([user.id, username, name, "", now, "–æ–∂–∏–¥–∞–µ—Ç", "", file_id])

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")
    )

    await bot.send_photo(
        ADMIN_ID,
        file_id,
        caption=f"–û—Ç–∑—ã–≤ –æ—Ç {username or name} (ID: {user.id})",
        reply_markup=kb
    )
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.callback_query_handler(lambda c: c.data.startswith(("approve_", "reject_")))
async def process_callback(callback_query: types.CallbackQuery):
    action, uid = callback_query.data.split("_")
    uid = int(uid)

    updated = []
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = list(csv.DictReader(f))
        for row in reader:
            if str(row["user_id"]) == str(uid):
                row["status"] = "–æ–¥–æ–±—Ä–µ–Ω–æ" if action == "approve" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                row["reason"] = "" if action == "approve" else "–ù–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é"
            updated.append(row)

    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=updated[0].keys())
        writer.writeheader()
        writer.writerows(updated)

    caption = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ" if action == "approve" else "‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ"
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(caption, callback_data="noop")
        )
    )

    await callback_query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ.")
    if action == "approve":
        await bot.send_message(uid, "–í–∞—à –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω! –°–ø–∞—Å–∏–±–æ üåü")
    else:
        await bot.send_message(uid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ —Ñ–æ—Ç–æ)
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –æ—Ç–∑—ã–≤–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏")

if __name__ == "__main__":
    init_csv()
    executor.start_polling(dp, skip_updates=True)
